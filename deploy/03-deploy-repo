#!/bin/bash

# Check for the presence of .env-prod
if [[ ! -f ./.env-prod ]]; then
    echo ".env-prod file is missing! Copy .env.example and update with your prod settings."
    exit 1
fi

. ./.env-prod
. ./.digital_ocean_env



echo "Shut it down" 
ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "cd src; docker-compose down"

# clone down the repo TODO, find a `git push` way to do this
ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "bash -s" < deploy/03a-clone-repo $DIGITAL_OCEAN_DEPLOY_REPO

# copy up production config
scp ./.env-prod $DIGITAL_OCEAN_APP_USER@$DROPLET_IP:/home/$DIGITAL_OCEAN_APP_USER/src/.env

if [[ ! -f ./docker-compose.override.yml.prod ]]; then
    read -p "docker-compose.override.yml.prod is missing. Would you like to copy docker-compose.override.yml.prod.example instead? (y/n): " answer
    if [[ $answer == "y" ]]; then
        cp ./docker-compose.override.yml.prod.example ./docker-compose.override.yml.prod
    else
        exit 1
    fi
fi

scp ./docker-compose.override.yml.prod $DIGITAL_OCEAN_APP_USER@$DROPLET_IP:/home/$DIGITAL_OCEAN_APP_USER/src/docker-compose.override.yml

rm .tmp/http*.conf

# Read the whitelist from DJANGO_PATH_WHITELIST
DJANGO_ALLOWED_PATHS=$(echo "$DJANGO_ALLOWED_PATHS" | tr ',' '|')  # Convert to regex format for Nginx
# Generate nginx conf with path whitelisting
for A_NAME in $(echo "$DIGITAL_OCEAN_A_RECORDS" | tr ',' ' '); do
    export DOMAIN=$DIGITAL_OCEAN_DOMAIN
    if [ "$A_NAME" != "@" ]; then 
        export DOMAIN="$A_NAME.$DOMAIN"
    fi

    echo "Generating nginx files for $DOMAIN with path whitelist $DJANGO_ALLOWED_PATHS"
    sed -e "s/example.com/$DOMAIN/g" \
        -e "s/DJANGO_ALLOWED_PATHS/$DJANGO_ALLOWED_PATHS/g" \
        deploy/nginx/http.conf > .tmp/http-$DOMAIN.conf

    sed -e "s/example.com/$DOMAIN/g" \
        -e "s/DJANGO_ALLOWED_PATHS/$DJANGO_ALLOWED_PATHS/g" \
        deploy/nginx/https.conf > .tmp/https-$DOMAIN.conf
done

# copy them up to the server
scp .tmp/* $DIGITAL_OCEAN_APP_USER@$DROPLET_IP:/home/$DIGITAL_OCEAN_APP_USER/src/.tmp/

# This is annoying that I can't have it in the previous script - it terminates early for reasons I can't figure
echo "Migrating database"
ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "cd src; docker-compose run app \"/bin/bash\" -c \"./manage.py migrate\" "

echo "Creating super user"
ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "cd src; docker-compose  run app \"/bin/bash\" -c \"./manage.py createsuperuser --noinput\" "

# echo "Create Super User API Token"
# output=$(ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "cd src; docker-compose  run --rm app /bin/bash -c './manage.py drf_create_token \$DJANGO_SUPERUSER_USERNAME'")
# token=$(echo "$output" | awk '{print $3}')

# # Update the .env file on the server with the new token
# echo "Set Super User API Token in ENV"
# ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "sed -i 's/^DJANGO_SUPERUSER_TOKEN=.*$/DJANGO_SUPERUSER_TOKEN=$token/' /home/$DIGITAL_OCEAN_APP_USER/src/.env"

# fire up the server
echo "Starting containers"
ssh $DIGITAL_OCEAN_APP_USER@$DROPLET_IP "bash -s" < deploy/03b-docker-compose-up $DIGITAL_OCEAN_APP_USER

# echo "Package JS"
#docker-compose run app "/bin/bash" -c "npm run build"

echo "Collecting files"
docker-compose run --rm app "/bin/bash" -c "/home/pyuser/app/manage.py collectstatic --no-input"

echo "Copying static files"
rsync -auv app/staticfiles/ $DIGITAL_OCEAN_APP_USER@$DROPLET_IP:/home/$DIGITAL_OCEAN_APP_USER/src/app/staticfiles/

echo Browse to either;
echo - http://$DROPLET_IP:$APP_PORT
for A_NAME in $(echo $DIGITAL_OCEAN_A_RECORDS | tr ',' ' '); do
    export DOMAIN=$DIGITAL_OCEAN_DOMAIN
    if [ "$A_NAME" != "@" ]; then 
        export DOMAIN="$A_NAME.$DOMAIN"
    fi
    echo - https://$DOMAIN
done

