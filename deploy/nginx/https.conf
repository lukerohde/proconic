map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}  

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=rate_limit_example.com:10m rate=10r/s;  # 10 requests per second

server {
    listen 443 ssl;
    server_name example.com;
    server_tokens off;
    client_max_body_size 4G;

    # Static files
    location /static/ {
        alias /usr/share/nginx/html/static_root/; 
        autoindex off;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # Media files
    location /media/ {
        alias /usr/share/nginx/html/media_root/; 
        autoindex off;
        add_header Cache-Control "public, max-age=3600";
    }

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

        # Handle Bare Root Path
    location = / {
        limit_req zone=rate_limit_example.com burst=20 nodelay;
        proxy_pass http://app:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors on;
        
        # WebSocket
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_redirect off;
        proxy_buffering off;

        # Timeouts
        proxy_read_timeout 30s;
        proxy_connect_timeout 30s;
    }
    
    # Proxy Pass to Django
    location ~ ^/(DJANGO_ALLOWED_PATHS)(/.*)?$ {
        limit_req zone=rate_limit_example.com burst=20 nodelay;  # Burst allows a short burst of 20 requests, then limits
        proxy_pass http://app:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors on;

        # WebSocket
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_redirect off; 
        proxy_buffering off;

        # Timeouts
        proxy_read_timeout 30s;
        proxy_connect_timeout 30s;
    }

    # Custom error pages
    error_page 403 /errors/403.html;
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/500.html;

    # Serve error pages
    location = /errors/403.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /errors/404.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /errors/500.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Serve images for error pages
    location ~* ^/errors/.*\.(jpg|jpeg|png)$ {
        root /usr/share/nginx/html;
        expires max;
        access_log off;
    }

    # Deny all other requests
    location / {
        return 444;
    }

    # # Logging
    # access_log /var/log/nginx/access.log main;
    # error_log /var/log/nginx/error.log warn;

    # # Block known bad IPs
    # include /etc/nginx/blocked_ips.conf;
}